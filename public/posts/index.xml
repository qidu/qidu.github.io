<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Agents Ages</title>
    <link>https://qidu.github.io/public/posts/</link>
    <description>Recent content in Posts on Agents Ages</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 May 2025 14:52:35 +0800</lastBuildDate>
    <atom:link href="https://qidu.github.io/public/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An Agent Development Kit</title>
      <link>https://qidu.github.io/public/posts/an-agent-development-kit/</link>
      <pubDate>Thu, 22 May 2025 14:52:35 +0800</pubDate>
      <guid>https://qidu.github.io/public/posts/an-agent-development-kit/</guid>
      <description>&lt;p&gt;&lt;code&gt;An Agent Development Kit&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;adk&lt;/code&gt; represents as dev tool for Agent, not for Android.&lt;/p&gt;&#xA;&lt;h2 id=&#34;workflow-agents-for-coding&#34;&gt;Workflow Agents for coding&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Code Writer Agent&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Takes the initial specification (from user query) and writes code.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code_writer_agent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LlmAgent(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CodeWriterAgent&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    model&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;LiteLlm(model&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;custom_openai/deepseek-v3-0324&amp;#34;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Code Reviewer Agent&#xA;** Review Criteria:**&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Correctness:&lt;/strong&gt; Does the code work as intended? Are there logic errors?&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Readability:&lt;/strong&gt; Is the code clear and easy to understand? Follows PEP 8 style guidelines?&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Efficiency:&lt;/strong&gt; Is the code reasonably efficient? Any obvious performance bottlenecks?&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Edge Cases:&lt;/strong&gt; Does the code handle potential edge cases or invalid inputs gracefully?&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Best Practices:&lt;/strong&gt; Does the code follow common Python best practices?&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Takes the code generated by the previous agent (read from state) and provides feedback.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code_reviewer_agent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LlmAgent(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CodeReviewerAgent&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    model&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;LiteLlm(model&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deepseek/deepseek-chat&amp;#34;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Code Refactorer Agent&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Takes the original code and the review comments (read from state) and refactors the code.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code_refactorer_agent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LlmAgent(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CodeRefactorerAgent&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    model&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;LiteLlm(model&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;custom_openai/deepseek-r1&amp;#34;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;SequentialAgent runs pipline: Writer -&amp;gt; Reviewer -&amp;gt; Refactorer&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;code_pipeline_agent = SequentialAgent(&#xA;    name=&amp;#34;CodePipelineAgent&amp;#34;,&#xA;    sub_agents=[code_writer_agent, code_reviewer_agent, code_refactorer_agent],&#xA;    description=(&#xA;        &amp;#34;Executes a sequence of code writing, reviewing, and refactoring.&amp;#34;&#xA;    ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;then run the agent&lt;/p&gt;</description>
    </item>
    <item>
      <title>MoA: Mixture of Agents</title>
      <link>https://qidu.github.io/public/posts/moa-mixture-of-agents/</link>
      <pubDate>Wed, 14 May 2025 19:34:20 +0800</pubDate>
      <guid>https://qidu.github.io/public/posts/moa-mixture-of-agents/</guid>
      <description>&lt;p&gt;&lt;code&gt;The proposed MoA architecture&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;The proposed architecture contains two main components: the proposers and the aggregators, both of which are LLMs that excel in their respective aspect of collaboration. for example GPT-4o, Qwen1.5, LLaMA-3 emerged as a versatile model effective in both assisting and aggregating tasks. In contrast, &lt;code&gt;WizardLM&lt;/code&gt; demonstrated excellent performance as a proposer model but struggled to maintain its effectiveness in aggregating responses from other models.&lt;/p&gt;&#xA;&lt;p&gt;learn more at:&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Agent War: Competition With Different Methodology</title>
      <link>https://qidu.github.io/public/posts/the-agent-war-competition-with-different-methodology/</link>
      <pubDate>Wed, 14 May 2025 10:48:52 +0800</pubDate>
      <guid>https://qidu.github.io/public/posts/the-agent-war-competition-with-different-methodology/</guid>
      <description>&lt;p&gt;&lt;code&gt;Distinct approaches to implementing Agentic AI&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Microsoft adopts a &amp;ldquo;Universal Platform&amp;rdquo; strategy, aiming to build an &lt;code&gt;AI operating system&lt;/code&gt; that reshapes the software ecosystem by overhauling its underlying architecture. Its Agents act as cross-system intelligent hubs, replacing traditional databases and business logic, shifting from an &amp;ldquo;App Stack&amp;rdquo; to an &amp;ldquo;Agent Stack&amp;rdquo;.&lt;/li&gt;&#xA;&lt;li&gt;Salesforce follows a &amp;ldquo;Vertical Integration&amp;rdquo; approach, embedding Agents deeply into &lt;code&gt;CRM and specific workflows&lt;/code&gt; within its existing SaaS business, enhancing task autonomy without disrupting the current architecture.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;Key Differences&lt;/code&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Starting Point for the Agent</title>
      <link>https://qidu.github.io/public/posts/the-starting-point-for-the-agent/</link>
      <pubDate>Tue, 13 May 2025 19:16:50 +0800</pubDate>
      <guid>https://qidu.github.io/public/posts/the-starting-point-for-the-agent/</guid>
      <description>&lt;p&gt;Building agents with LLM is implemented much more into reality from a cool concept.&#xA;Planning, Tool Calling, Acting, Self-Reflection are the standard 4 steps of the Agent Architecture,&#xA;or the Agentic AI now.&lt;/p&gt;&#xA;&lt;p&gt;We can learn more from the starting point for the Agent in this article:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://lilianweng.github.io/posts/2023-06-23-agent/&#34;&gt;LLM Powered Autonomous Agents&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
